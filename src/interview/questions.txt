
Integer i1 = 100;
Integer i2 = 100;
Integer i3 = 500;
Integer i4 = 500;

System.out.println(i1 == i2);
System.out.println(i3 == i4);

Integer i1 = 100;   // Uses cached object
Integer i2 = 100;   // Reuses same cached object
System.out.println(i1 == i2);  // true - same object reference

Same Integer object is referenced for range -128 to 127

Integer i3 = 500;   // Creates new object
Integer i4 = 500;   // Creates different new object
System.out.println(i3 == i4);  // false - different object references

New Integer object is created for range above 127

// Correct way to compare Integer values
System.out.println(i1.equals(i2));  // Always true for equal values
System.out.println(i3.equals(i4));  // Always true for equal values

--------------------------------------------------------------------------------------------------------

int method() {
    try {
        return 1;
    } catch(Exception ex){
	    return 2;
    } finally {
        return 3;
    }
}

Stack replaces return 1 with return 3 so return 3 will be the output

--------------------------------------------------------------------------------------------------------

public static void main (String[] args) throws java.lang.Exception {
		String str = "lok";
		str.concat("p");
		System.out.print(str); // lok
}

str.concat("p"); Creates new String. No Exception will be thrown and it executes successfully.

--------------------------------------------------------------------------------------------------------

Cannot modify values in stream of outer variables. You can modify object values or make  Atomic variables.

AtomicInteger count = new AtomicInteger();
Arrays.stream(arr).forEach(x -> {
    if (x == 1) {
        count.incrementAndGet();
    }
});

--------------------------------------------------------------------------------------------------------
        List<Integer> list1 = List.of(71, 21, 34, 89, 56, 28);
        List<Integer> list2 = List.of(12, 56, 17, 21, 94, 34);

        // Combine both lists
        Map<Integer, Long> combinedCount = Stream.concat(list1.stream(), list2.stream())
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

        // Filter out elements that appear only once (not duplicates)
        Map<Integer, Long> duplicateCount = combinedCount.entrySet().stream()
                .filter(entry -> entry.getValue() > 1)
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
--------------------------------------------------------------------------------------------------------

int[] a = new int[232]; // valid
boolean[] b = new boolean[-200]; // invalid Throws NegativeArraySizeException at runtime
double[] c = new double[3456666663234] //invalid Exceeds Integer.MAX_VALUE (2147483647)

--------------------------------------------------------------------------------------------------------
class A {

  String a;

  String getA(){

    return a;

  }

}


class B extends A{

  String b;

  String getB(){

    return b;

  }

}

main(){

    A a = new B();

    A a1 = new A();

    B b = new A();

    B b1 = new B();

	B bb = (B) a; // Typecasting valid.

	a.getB();
	a1.getB();
	b1.getB();
	b1.getA();
}

Valid declarations:
A a = new B(); ✓ Valid (upcasting)
A a1 = new A(); ✓ Valid (same type)
B b1 = new B(); ✓ Valid (same type)

Invalid declarations:
B b = new A(); ✗ Invalid (downcasting without check)

Method calls:
a.getB(); ✗ Invalid (A reference can't call B-specific methods)
a1.getB(); ✗ Invalid (A reference can't call B-specific methods)
b1.getB(); ✓ Valid (B reference can call B methods)
b1.getA(); ✓ Valid (B inherits A's methods)

--------------------------------------------------------------------------------------------------------
List<Person> list;
Map<Department, List<Person>> map = list.stream().collect(Collectors.groupingBy(Person::Department));
Map<Department, List<Integer>> map = list.stream().collect(Collectors.groupingBy(Person::Department, mapping(Person::getId, toList())));
Map<Department, Double> map = list.stream().collect(Collectors.groupingBy(Person::Department, averagingDouble(Person::getSalary)));
Map<Department, Long> map = list.stream().collect(Collectors.groupingBy(Person::Department, counting()));

SELECT d.name, COUNT(e.id) as employeeCount
    FROM employee e JOIN department d ON e.departmentId = d.id
    GROUP BY d.name // Select statement should contain group by clause
--------------------------------------------------------------------------------------------------------
// Find employee with second-highest salary from employee table

SELECT employeeName FROM employee ORDER BY salary DESC LIMIT 2 OFFSET 1
--------------------------------------------------------------------------------------------------------
String str = "hello";
String str2 = new String("hello");
Map<String, String> map = new HashMap<>();
map.put(str, str);
map.put(str2, str2);
System.out.println(map.size()); // 1

Map uses equals to compare keys. Since str and str2 have the same value, they are considered equal.
The hashCode() method in Java's String class calculates the hash code based on the content of the string.
Hashcode is same for both strings.
---------------------------------------------------------------------------------------------------------

method1(’T’, “Hello”); - Error - ’T’ literal not allowed

---------------------------------------------------------------------------------------------------------

Collectors.counting() returns Long since it has wide range than Integer and defined in method signature itself.

---------------------------------------------------------------------------------------------------------
list:[1,2,3,4,5,6,7,8,9]
print the list by removing first and last element using java 8

List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
List<Integer> result = list.subList(1, list.size() - 1);
---------------------------------------------------------------------------------------------------------

map.get(null) - returns null if key is not present in map. It will not throw NullPointerException.

---------------------------------------------------------------------------------------------------------
List<Employee> list = new ArrayList();

Employee Object Has - id, name, salary

A - salary < 20
B - salary >= 20 && < 40
C - salary >= 40

Map<String, List<Employee>> map = list.stream().collect(Collectors.groupingBy(employee -> {
	if(employee.getSalary() < 20000) {
		return "A";
	} else if(employee.getSalary() >= 20000 && employee.getSalary() < 40000) {
		return "B";
	} else {
		return "C";
	}
}));
---------------------------------------------------------------------------------------------------------
String[] input = {"hello", "world"};
Output: ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']

List<Character> result = Arrays.stream(input)
                     .flatMap(s -> s.chars().mapToObj(c -> (char)c))
                     .collect(Collectors.toList());
---------------------------------------------------------------------------------------------------------
// Find the second highest salary from employee table

SELECT department.name, MAX(employee.salary) AS maximumSalary, employee.name
FROM employee
JOIN department ON department.departmentId = employee.departmentId
GROUP BY department.name, employee.name
ORDER BY maximumSalary DESC
OFFSET 1 ROWS
LIMIT 2;
---------------------------------------------------------------------------------------------------------
Caching Wrapper;

Integer	Cached for values -128 to 127
Long	Cached for values -128 to 127
Short	Cached for values -128 to 127
Byte	Cached for all values (-128 to 127 range covers all bytes)
Character	Cached for values 0 to 127
Boolean	Cached for true and false
Float	No caching, new object created every time
Double	No caching, new object created every time

-Djava.lang.Integer.IntegerCache.high=500 - JVM System Property can be used to increase the cache range
---------------------------------------------------------------------------------------------------------
EXPLAIN ANALYZE
SELECT * FROM film WHERE film_id = 10;
---------------------------------------------------------------------------------------------------------
